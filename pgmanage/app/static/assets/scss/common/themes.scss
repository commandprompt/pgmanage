@import './variables.scss';

//shortcuts
$borderColor: 'borderColor';
$border: 'border';
$color: 'color';
$surfaceBg: 'surfaceBg';
$inputBg: 'inputBg';
$disabledInputBg: 'disabledInputBg';
$customFileInputBg: 'customFileInputBg';
$customFileInputBorder: 'customFileInputBorder';
$customFileButtonBg: 'customFileButtonBg';
$accordionHeadingBg: 'accordionHeadingBg';
$accordionHeadingActiveBg: 'accordionHeadingActiveBg';
$accordionItemActiveBg: 'accordionItemActiveBg';
$tabsSurfaceBg: 'tabsSurfaceBg';

$themes: (
    light: (
        borderColor: $borderColorLight,
        border: $borderLight,
        color: $fontColorLight,
        surfaceBg: $bgSurfaceLight,
        inputBg: $bgSurfaceLight,
        customFileInputBg: $bgSurfaceLight,
        customFileInputBorder: $borderLight,
        customFileButtonBg: $secondaryGrey,
        accordionHeadingBg: $accordionHeadingBgLight,
        accordionHeadingActiveBg: $accordionHeadingActiveBgLight,
        accordionItemActiveBg: $accordionItemActiveBgLight,
        disabledInputBg: $bgLight,
        tabsSurfaceBg: $bgSurfaceBlueLight,
    ),
    dark: (
        borderColor: $borderColorDark,
        border: $borderDark,
        color: $fontColorDark,
        surfaceBg: $bgSurfaceDark,
        inputBg: $bgDark,
        customFileInputBg: rgba($secondaryGrey, .5),
        customFileInputBorder: rgba($secondaryGrey, .5),
        customFileButtonBg: $secondaryGrey,
        accordionHeadingBg: $accordionHeadingBgDark,
        accordionHeadingActiveBg: $accordionHeadingActiveBgDark,
        accordionItemActiveBg: $accordionItemActiveBgDark,
        disabledInputBg: $disabledInputBgDark,
        tabsSurfaceBg: $bgSurfaceSecondaryDark,
    ),
);

@mixin themify() {
    @each $theme, $map in $themes {
        .pgmanage-theme--#{$theme} & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
            @content;
            $theme-map: () !global;
      }
    }
  }

  @function themed($key) {
    @return map-get($theme-map, $key);
  }